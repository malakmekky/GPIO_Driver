

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Jul 16 15:10:18 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     7                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Version 2.40
    16                           ; Generated 17/11/2021 GMT
    17                           ; 
    18                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009C                     CMCON           equ	156	;# 
   109     009D                     CVRCON          equ	157	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     0000                     INDF            equ	0	;# 
   179     0001                     TMR0            equ	1	;# 
   180     0002                     PCL             equ	2	;# 
   181     0003                     STATUS          equ	3	;# 
   182     0004                     FSR             equ	4	;# 
   183     0005                     PORTA           equ	5	;# 
   184     0006                     PORTB           equ	6	;# 
   185     0007                     PORTC           equ	7	;# 
   186     0008                     PORTD           equ	8	;# 
   187     0009                     PORTE           equ	9	;# 
   188     000A                     PCLATH          equ	10	;# 
   189     000B                     INTCON          equ	11	;# 
   190     000C                     PIR1            equ	12	;# 
   191     000D                     PIR2            equ	13	;# 
   192     000E                     TMR1            equ	14	;# 
   193     000E                     TMR1L           equ	14	;# 
   194     000F                     TMR1H           equ	15	;# 
   195     0010                     T1CON           equ	16	;# 
   196     0011                     TMR2            equ	17	;# 
   197     0012                     T2CON           equ	18	;# 
   198     0013                     SSPBUF          equ	19	;# 
   199     0014                     SSPCON          equ	20	;# 
   200     0015                     CCPR1           equ	21	;# 
   201     0015                     CCPR1L          equ	21	;# 
   202     0016                     CCPR1H          equ	22	;# 
   203     0017                     CCP1CON         equ	23	;# 
   204     0018                     RCSTA           equ	24	;# 
   205     0019                     TXREG           equ	25	;# 
   206     001A                     RCREG           equ	26	;# 
   207     001B                     CCPR2           equ	27	;# 
   208     001B                     CCPR2L          equ	27	;# 
   209     001C                     CCPR2H          equ	28	;# 
   210     001D                     CCP2CON         equ	29	;# 
   211     001E                     ADRESH          equ	30	;# 
   212     001F                     ADCON0          equ	31	;# 
   213     0081                     OPTION_REG      equ	129	;# 
   214     0085                     TRISA           equ	133	;# 
   215     0086                     TRISB           equ	134	;# 
   216     0087                     TRISC           equ	135	;# 
   217     0088                     TRISD           equ	136	;# 
   218     0089                     TRISE           equ	137	;# 
   219     008C                     PIE1            equ	140	;# 
   220     008D                     PIE2            equ	141	;# 
   221     008E                     PCON            equ	142	;# 
   222     0091                     SSPCON2         equ	145	;# 
   223     0092                     PR2             equ	146	;# 
   224     0093                     SSPADD          equ	147	;# 
   225     0094                     SSPSTAT         equ	148	;# 
   226     0098                     TXSTA           equ	152	;# 
   227     0099                     SPBRG           equ	153	;# 
   228     009C                     CMCON           equ	156	;# 
   229     009D                     CVRCON          equ	157	;# 
   230     009E                     ADRESL          equ	158	;# 
   231     009F                     ADCON1          equ	159	;# 
   232     010C                     EEDATA          equ	268	;# 
   233     010D                     EEADR           equ	269	;# 
   234     010E                     EEDATH          equ	270	;# 
   235     010F                     EEADRH          equ	271	;# 
   236     018C                     EECON1          equ	396	;# 
   237     018D                     EECON2          equ	397	;# 
   238                           
   239                           	psect	cinit
   240     07FC                     start_initialization:	
   241                           ; #config settings
   242                           
   243     07FC                     __initialization:
   244     07FC                     end_of_initialization:	
   245                           ;End of C runtime variable initialization code
   246                           
   247     07FC                     __end_of__initialization:
   248     07FC  0183               	clrf	3
   249     07FD  120A  118A  2FC4   	ljmp	_main	;jump to C main() function
   250                           
   251                           	psect	cstackCOMMON
   252     0070                     __pcstackCOMMON:
   253     0070                     ?_setPinDir:
   254     0070                     ?_setPinLevel:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_delayMS:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0070                     ?_main:	
   261                           ; 1 bytes @ 0x0
   262                           
   263     0070                     ?_getBit:	
   264                           ; 1 bytes @ 0x0
   265                           
   266     0070                     setPinDir@port:	
   267                           ; 2 bytes @ 0x0
   268                           
   269     0070                     setPinLevel@port:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     getBit@pin:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     getBit@port:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     delayMS@M:	
   279                           ; 1 bytes @ 0x0
   280                           
   281                           
   282                           ; 2 bytes @ 0x0
   283     0070                     	ds	1
   284     0071                     setPinDir@dir:
   285     0071                     setPinLevel@level:	
   286                           ; 1 bytes @ 0x1
   287                           
   288                           
   289                           ; 1 bytes @ 0x1
   290     0071                     	ds	1
   291     0072                     ??_setPinDir:
   292     0072                     ??_setPinLevel:	
   293                           ; 1 bytes @ 0x2
   294                           
   295     0072                     ??_getBit:	
   296                           ; 1 bytes @ 0x2
   297                           
   298     0072                     ??_delayMS:	
   299                           ; 1 bytes @ 0x2
   300                           
   301                           
   302                           ; 1 bytes @ 0x2
   303     0072                     	ds	1
   304     0073                     delayMS@i:
   305                           
   306                           ; 2 bytes @ 0x3
   307     0073                     	ds	2
   308     0075                     setPinDir@pin:
   309     0075                     setPinLevel@pin:	
   310                           ; 1 bytes @ 0x5
   311                           
   312     0075                     delayMS@j:	
   313                           ; 1 bytes @ 0x5
   314                           
   315                           
   316                           ; 2 bytes @ 0x5
   317     0075                     	ds	2
   318     0077                     ??_main:
   319                           
   320                           	psect	maintext
   321     07C4                     __pmaintext:	
   322                           ; 1 bytes @ 0x7
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 27 in file "main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : B00/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   342 ;;      Params:         0       0       0       0       0
   343 ;;      Locals:         0       0       0       0       0
   344 ;;      Temps:          0       0       0       0       0
   345 ;;      Totals:         0       0       0       0       0
   346 ;;Total ram usage:        0 bytes
   347 ;; Hardware stack levels required when called: 1
   348 ;; This function calls:
   349 ;;		_delayMS
   350 ;;		_getBit
   351 ;;		_setPinDir
   352 ;;		_setPinLevel
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358     07C4                     _main:	
   359                           ;psect for function _main
   360                           
   361     07C4                     l666:	
   362                           ;incstack = 0
   363                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   364                           
   365                           
   366                           ;main.c: 28:     setPinDir(PIN1, EPORTB, OUT);
   367     07C4  01F0               	clrf	setPinDir@port
   368     07C5  0AF0               	incf	setPinDir@port,f
   369     07C6  01F1               	clrf	setPinDir@dir
   370     07C7  3001               	movlw	1
   371     07C8  120A  118A  2754  120A  118A  	fcall	_setPinDir
   372     07CD                     l40:	
   373                           ;main.c: 29:     while(1){
   374                           
   375                           
   376                           ;main.c: 30:         setPinDir(PIN2, EPORTB, IN);
   377     07CD  01F0               	clrf	setPinDir@port
   378     07CE  0AF0               	incf	setPinDir@port,f
   379     07CF  01F1               	clrf	setPinDir@dir
   380     07D0  0AF1               	incf	setPinDir@dir,f
   381     07D1  3002               	movlw	2
   382     07D2  120A  118A  2754  120A  118A  	fcall	_setPinDir
   383                           
   384                           ;main.c: 31:         if (getBit(PIN2, EPORTB) == 0){
   385     07D7  01F0               	clrf	getBit@port
   386     07D8  0AF0               	incf	getBit@port,f
   387     07D9  3002               	movlw	2
   388     07DA  120A  118A  2714  120A  118A  	fcall	_getBit
   389     07DF  0870               	movf	?_getBit,w
   390     07E0  0471               	iorwf	?_getBit+1,w
   391     07E1  1D03               	btfss	3,2
   392     07E2  2FE4               	goto	u231
   393     07E3  2FE5               	goto	u230
   394     07E4                     u231:
   395     07E4  2FEF               	goto	l670
   396     07E5                     u230:
   397     07E5                     l668:
   398                           
   399                           ;main.c: 32:             setPinLevel(PIN1, EPORTB, HIGH);
   400     07E5  01F0               	clrf	setPinLevel@port
   401     07E6  0AF0               	incf	setPinLevel@port,f
   402     07E7  01F1               	clrf	setPinLevel@level
   403     07E8  0AF1               	incf	setPinLevel@level,f
   404     07E9  3001               	movlw	1
   405     07EA  120A  118A  278C  120A  118A  	fcall	_setPinLevel
   406     07EF                     l670:
   407                           
   408                           ;main.c: 35:          delayMS(1000);
   409     07EF  30E8               	movlw	232
   410     07F0  00F0               	movwf	delayMS@M
   411     07F1  3003               	movlw	3
   412     07F2  00F1               	movwf	delayMS@M+1
   413     07F3  120A  118A  2727  120A  118A  	fcall	_delayMS
   414     07F8  2FCD               	goto	l40
   415     07F9  120A  118A  2800   	ljmp	start
   416     07FC                     __end_of_main:
   417                           
   418                           	psect	text1
   419     078C                     __ptext1:	
   420 ;; *************** function _setPinLevel *****************
   421 ;; Defined at:
   422 ;;		line 15 in file "gpio.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;  pin             1    wreg     enum E1331
   425 ;;  port            1    0[COMMON] enum E1345
   426 ;;  level           1    1[COMMON] enum E1341
   427 ;; Auto vars:     Size  Location     Type
   428 ;;  pin             1    5[COMMON] enum E1331
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   438 ;;      Params:         2       0       0       0       0
   439 ;;      Locals:         1       0       0       0       0
   440 ;;      Temps:          3       0       0       0       0
   441 ;;      Totals:         6       0       0       0       0
   442 ;;Total ram usage:        6 bytes
   443 ;; Hardware stack levels used: 1
   444 ;; This function calls:
   445 ;;		Nothing
   446 ;; This function is called by:
   447 ;;		_main
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451     078C                     _setPinLevel:	
   452                           ;psect for function _setPinLevel
   453                           
   454                           
   455                           ;incstack = 0
   456                           ; Regs used in _setPinLevel: [wreg-fsr0h+status,2+status,0]
   457                           ;setPinLevel@pin stored from wreg
   458     078C  00F5               	movwf	setPinLevel@pin
   459     078D                     l640:
   460                           
   461                           ;gpio.c: 16:     if (level == HIGH){
   462     078D  0371               	decf	setPinLevel@level,w
   463     078E  1D03               	btfss	3,2
   464     078F  2F91               	goto	u171
   465     0790  2F92               	goto	u170
   466     0791                     u171:
   467     0791  2FA8               	goto	l644
   468     0792                     u170:
   469     0792                     l642:
   470                           
   471                           ;gpio.c: 17:         (*(&*((char*)0x05) + (port))) |= (1<<pin);
   472     0792  3005               	movlw	5
   473     0793  0770               	addwf	setPinLevel@port,w
   474     0794  00F2               	movwf	??_setPinLevel
   475     0795  01F3               	clrf	??_setPinLevel+1
   476     0796  0DF3               	rlf	??_setPinLevel+1,f
   477     0797  0872               	movf	??_setPinLevel,w
   478     0798  0084               	movwf	4
   479     0799  1783               	bsf	3,7
   480     079A  1C73               	btfss	??_setPinLevel+1,0
   481     079B  1383               	bcf	3,7
   482     079C  3001               	movlw	1
   483     079D  00F4               	movwf	??_setPinLevel+2
   484     079E  0A75               	incf	setPinLevel@pin,w
   485     079F  2FA2               	goto	u184
   486     07A0                     u185:
   487     07A0  1003               	clrc
   488     07A1  0DF4               	rlf	??_setPinLevel+2,f
   489     07A2                     u184:
   490     07A2  3EFF               	addlw	-1
   491     07A3  1D03               	skipz
   492     07A4  2FA0               	goto	u185
   493     07A5  0874               	movf	??_setPinLevel+2,w
   494     07A6  0480               	iorwf	0,f
   495                           
   496                           ;gpio.c: 18:     }
   497     07A7  2FC3               	goto	l12
   498     07A8                     l644:
   499     07A8  0871               	movf	setPinLevel@level,w
   500     07A9  1D03               	btfss	3,2
   501     07AA  2FAC               	goto	u191
   502     07AB  2FAD               	goto	u190
   503     07AC                     u191:
   504     07AC  2FC3               	goto	l12
   505     07AD                     u190:
   506     07AD                     l646:
   507                           
   508                           ;gpio.c: 20:         (*(&*((char*)0x05) + (port))) &= ~(1<<pin);
   509     07AD  3005               	movlw	5
   510     07AE  0770               	addwf	setPinLevel@port,w
   511     07AF  00F2               	movwf	??_setPinLevel
   512     07B0  01F3               	clrf	??_setPinLevel+1
   513     07B1  0DF3               	rlf	??_setPinLevel+1,f
   514     07B2  0872               	movf	??_setPinLevel,w
   515     07B3  0084               	movwf	4
   516     07B4  1783               	bsf	3,7
   517     07B5  1C73               	btfss	??_setPinLevel+1,0
   518     07B6  1383               	bcf	3,7
   519     07B7  3001               	movlw	1
   520     07B8  00F4               	movwf	??_setPinLevel+2
   521     07B9  0A75               	incf	setPinLevel@pin,w
   522     07BA  2FBD               	goto	u204
   523     07BB                     u205:
   524     07BB  1003               	clrc
   525     07BC  0DF4               	rlf	??_setPinLevel+2,f
   526     07BD                     u204:
   527     07BD  3EFF               	addlw	-1
   528     07BE  1D03               	skipz
   529     07BF  2FBB               	goto	u205
   530     07C0  0874               	movf	??_setPinLevel+2,w
   531     07C1  3AFF               	xorlw	255
   532     07C2  0580               	andwf	0,f
   533     07C3                     l12:
   534     07C3  0008               	return
   535     07C4                     __end_of_setPinLevel:
   536                           
   537                           	psect	text2
   538     0754                     __ptext2:	
   539 ;; *************** function _setPinDir *****************
   540 ;; Defined at:
   541 ;;		line 7 in file "gpio.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;  pin             1    wreg     enum E1331
   544 ;;  port            1    0[COMMON] enum E1345
   545 ;;  dir             1    1[COMMON] enum E1327
   546 ;; Auto vars:     Size  Location     Type
   547 ;;  pin             1    5[COMMON] enum E1331
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      void 
   550 ;; Registers used:
   551 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   557 ;;      Params:         2       0       0       0       0
   558 ;;      Locals:         1       0       0       0       0
   559 ;;      Temps:          3       0       0       0       0
   560 ;;      Totals:         6       0       0       0       0
   561 ;;Total ram usage:        6 bytes
   562 ;; Hardware stack levels used: 1
   563 ;; This function calls:
   564 ;;		Nothing
   565 ;; This function is called by:
   566 ;;		_main
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570     0754                     _setPinDir:	
   571                           ;psect for function _setPinDir
   572                           
   573                           
   574                           ;incstack = 0
   575                           ; Regs used in _setPinDir: [wreg-fsr0h+status,2+status,0]
   576                           ;setPinDir@pin stored from wreg
   577     0754  00F5               	movwf	setPinDir@pin
   578     0755                     l632:
   579                           
   580                           ;gpio.c: 8:     if (dir == IN){
   581     0755  0371               	decf	setPinDir@dir,w
   582     0756  1D03               	btfss	3,2
   583     0757  2F59               	goto	u131
   584     0758  2F5A               	goto	u130
   585     0759                     u131:
   586     0759  2F70               	goto	l636
   587     075A                     u130:
   588     075A                     l634:
   589                           
   590                           ;gpio.c: 9:         (*(&*((char*)0x85) + (port))) |= (1<< pin);
   591     075A  3085               	movlw	133
   592     075B  0770               	addwf	setPinDir@port,w
   593     075C  00F2               	movwf	??_setPinDir
   594     075D  01F3               	clrf	??_setPinDir+1
   595     075E  0DF3               	rlf	??_setPinDir+1,f
   596     075F  0872               	movf	??_setPinDir,w
   597     0760  0084               	movwf	4
   598     0761  1783               	bsf	3,7
   599     0762  1C73               	btfss	??_setPinDir+1,0
   600     0763  1383               	bcf	3,7
   601     0764  3001               	movlw	1
   602     0765  00F4               	movwf	??_setPinDir+2
   603     0766  0A75               	incf	setPinDir@pin,w
   604     0767  2F6A               	goto	u144
   605     0768                     u145:
   606     0768  1003               	clrc
   607     0769  0DF4               	rlf	??_setPinDir+2,f
   608     076A                     u144:
   609     076A  3EFF               	addlw	-1
   610     076B  1D03               	skipz
   611     076C  2F68               	goto	u145
   612     076D  0874               	movf	??_setPinDir+2,w
   613     076E  0480               	iorwf	0,f
   614                           
   615                           ;gpio.c: 10:     }
   616     076F  2F8B               	goto	l6
   617     0770                     l636:
   618     0770  0871               	movf	setPinDir@dir,w
   619     0771  1D03               	btfss	3,2
   620     0772  2F74               	goto	u151
   621     0773  2F75               	goto	u150
   622     0774                     u151:
   623     0774  2F8B               	goto	l6
   624     0775                     u150:
   625     0775                     l638:
   626                           
   627                           ;gpio.c: 12:         (*(&*((char*)0x85) + (port))) &= ~(1<<pin);
   628     0775  3085               	movlw	133
   629     0776  0770               	addwf	setPinDir@port,w
   630     0777  00F2               	movwf	??_setPinDir
   631     0778  01F3               	clrf	??_setPinDir+1
   632     0779  0DF3               	rlf	??_setPinDir+1,f
   633     077A  0872               	movf	??_setPinDir,w
   634     077B  0084               	movwf	4
   635     077C  1783               	bsf	3,7
   636     077D  1C73               	btfss	??_setPinDir+1,0
   637     077E  1383               	bcf	3,7
   638     077F  3001               	movlw	1
   639     0780  00F4               	movwf	??_setPinDir+2
   640     0781  0A75               	incf	setPinDir@pin,w
   641     0782  2F85               	goto	u164
   642     0783                     u165:
   643     0783  1003               	clrc
   644     0784  0DF4               	rlf	??_setPinDir+2,f
   645     0785                     u164:
   646     0785  3EFF               	addlw	-1
   647     0786  1D03               	skipz
   648     0787  2F83               	goto	u165
   649     0788  0874               	movf	??_setPinDir+2,w
   650     0789  3AFF               	xorlw	255
   651     078A  0580               	andwf	0,f
   652     078B                     l6:
   653     078B  0008               	return
   654     078C                     __end_of_setPinDir:
   655                           
   656                           	psect	text3
   657     0714                     __ptext3:	
   658 ;; *************** function _getBit *****************
   659 ;; Defined at:
   660 ;;		line 23 in file "gpio.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;  pin             1    wreg     enum E1331
   663 ;;  port            1    0[COMMON] enum E1345
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  pin             1    0[COMMON] enum E1331
   666 ;; Return value:  Size  Location     Type
   667 ;;                  2    0[COMMON] int 
   668 ;; Registers used:
   669 ;;		wreg, fsr0l, fsr0h, status,2
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   675 ;;      Params:         2       0       0       0       0
   676 ;;      Locals:         0       0       0       0       0
   677 ;;      Temps:          4       0       0       0       0
   678 ;;      Totals:         6       0       0       0       0
   679 ;;Total ram usage:        6 bytes
   680 ;; Hardware stack levels used: 1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688     0714                     _getBit:	
   689                           ;psect for function _getBit
   690                           
   691     0714                     l648:	
   692                           ;incstack = 0
   693                           ; Regs used in _getBit: [wreg-fsr0h+status,2]
   694                           
   695                           
   696                           ;gpio.c: 26:     return (*(&*((char*)0x05) + (port)))&1;
   697     0714  3005               	movlw	5
   698     0715  0770               	addwf	getBit@port,w
   699     0716  00F2               	movwf	??_getBit
   700     0717  01F3               	clrf	??_getBit+1
   701     0718  0DF3               	rlf	??_getBit+1,f
   702     0719  0872               	movf	??_getBit,w
   703     071A  0084               	movwf	4
   704     071B  1783               	bsf	3,7
   705     071C  1C73               	btfss	??_getBit+1,0
   706     071D  1383               	bcf	3,7
   707     071E  0800               	movf	0,w
   708     071F  3901               	andlw	1
   709     0720  00F4               	movwf	??_getBit+2
   710     0721  01F5               	clrf	??_getBit+3
   711     0722  0874               	movf	??_getBit+2,w
   712     0723  00F0               	movwf	?_getBit
   713     0724  0875               	movf	??_getBit+3,w
   714     0725  00F1               	movwf	?_getBit+1
   715     0726                     l15:
   716     0726  0008               	return
   717     0727                     __end_of_getBit:
   718                           
   719                           	psect	text4
   720     0727                     __ptext4:	
   721 ;; *************** function _delayMS *****************
   722 ;; Defined at:
   723 ;;		line 18 in file "main.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;  M               2    0[COMMON] int 
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  j               2    5[COMMON] int 
   728 ;;  i               2    3[COMMON] int 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2, btemp+1
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   738 ;;      Params:         2       0       0       0       0
   739 ;;      Locals:         4       0       0       0       0
   740 ;;      Temps:          1       0       0       0       0
   741 ;;      Totals:         7       0       0       0       0
   742 ;;Total ram usage:        7 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; This function calls:
   745 ;;		Nothing
   746 ;; This function is called by:
   747 ;;		_main
   748 ;; This function uses a non-reentrant model
   749 ;;
   750                           
   751     0727                     _delayMS:	
   752                           ;psect for function _delayMS
   753                           
   754     0727                     l652:	
   755                           ;incstack = 0
   756                           ; Regs used in _delayMS: [wreg+status,2+btemp+1]
   757                           
   758                           
   759                           ;main.c: 19:     int i, j;;main.c: 20:     for (i = 0; i<M ; i++){
   760     0727  01F3               	clrf	delayMS@i
   761     0728  01F4               	clrf	delayMS@i+1
   762     0729  2F45               	goto	l30
   763     072A                     l654:
   764                           
   765                           ;main.c: 21:         for (j = 0; j<80; j++){
   766     072A  01F5               	clrf	delayMS@j
   767     072B  01F6               	clrf	delayMS@j+1
   768     072C                     l660:
   769                           
   770                           ;main.c: 23:         }
   771     072C  3001               	movlw	1
   772     072D  07F5               	addwf	delayMS@j,f
   773     072E  1803               	skipnc
   774     072F  0AF6               	incf	delayMS@j+1,f
   775     0730  3000               	movlw	0
   776     0731  07F6               	addwf	delayMS@j+1,f
   777     0732                     l662:
   778     0732  0876               	movf	delayMS@j+1,w
   779     0733  3A80               	xorlw	128
   780     0734  00FF               	movwf	btemp+1
   781     0735  3080               	movlw	128
   782     0736  027F               	subwf	btemp+1,w
   783     0737  1D03               	skipz
   784     0738  2F3B               	goto	u215
   785     0739  3050               	movlw	80
   786     073A  0275               	subwf	delayMS@j,w
   787     073B                     u215:
   788     073B  1C03               	skipc
   789     073C  2F3E               	goto	u211
   790     073D  2F3F               	goto	u210
   791     073E                     u211:
   792     073E  2F2C               	goto	l660
   793     073F                     u210:
   794     073F                     l664:
   795                           
   796                           ;main.c: 24:     }
   797     073F  3001               	movlw	1
   798     0740  07F3               	addwf	delayMS@i,f
   799     0741  1803               	skipnc
   800     0742  0AF4               	incf	delayMS@i+1,f
   801     0743  3000               	movlw	0
   802     0744  07F4               	addwf	delayMS@i+1,f
   803     0745                     l30:
   804     0745  0874               	movf	delayMS@i+1,w
   805     0746  3A80               	xorlw	128
   806     0747  00F2               	movwf	??_delayMS
   807     0748  0871               	movf	delayMS@M+1,w
   808     0749  3A80               	xorlw	128
   809     074A  0272               	subwf	??_delayMS,w
   810     074B  1D03               	skipz
   811     074C  2F4F               	goto	u225
   812     074D  0870               	movf	delayMS@M,w
   813     074E  0273               	subwf	delayMS@i,w
   814     074F                     u225:
   815     074F  1C03               	skipc
   816     0750  2F52               	goto	u221
   817     0751  2F53               	goto	u220
   818     0752                     u221:
   819     0752  2F2A               	goto	l654
   820     0753                     u220:
   821     0753                     l35:
   822     0753  0008               	return
   823     0754                     __end_of_delayMS:
   824     0002                     ___latbits      equ	2
   825     007E                     btemp           set	126	;btemp
   826     007E                     wtemp0          set	126
   827                           
   828                           	psect	idloc
   829                           
   830                           ;Config register IDLOC0 @ 0x2000
   831                           ;	unspecified, using default values
   832     2000                     	org	8192
   833     2000  3FFF               	dw	16383
   834                           
   835                           ;Config register IDLOC1 @ 0x2001
   836                           ;	unspecified, using default values
   837     2001                     	org	8193
   838     2001  3FFF               	dw	16383
   839                           
   840                           ;Config register IDLOC2 @ 0x2002
   841                           ;	unspecified, using default values
   842     2002                     	org	8194
   843     2002  3FFF               	dw	16383
   844                           
   845                           ;Config register IDLOC3 @ 0x2003
   846                           ;	unspecified, using default values
   847     2003                     	org	8195
   848     2003  3FFF               	dw	16383
   849                           
   850                           	psect	config
   851                           
   852                           ;Config register CONFIG @ 0x2007
   853                           ;	Oscillator Selection bits
   854                           ;	FOSC = XT, XT oscillator
   855                           ;	Watchdog Timer Enable bit
   856                           ;	WDTE = OFF, WDT disabled
   857                           ;	Power-up Timer Enable bit
   858                           ;	PWRTE = OFF, PWRT disabled
   859                           ;	Brown-out Reset Enable bit
   860                           ;	BOREN = OFF, BOR disabled
   861                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   862                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   863                           ;	Data EEPROM Memory Code Protection bit
   864                           ;	CPD = OFF, Data EEPROM code protection off
   865                           ;	Flash Program Memory Write Enable bits
   866                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   867                           ;	In-Circuit Debugger Mode bit
   868                           ;	DEBUG = 0x1, unprogrammed default
   869                           ;	Flash Program Memory Code Protection bit
   870                           ;	CP = OFF, Code protection off
   871     2007                     	org	8199
   872     2007  3F39               	dw	16185

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delayMS

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     414
                            _delayMS
                             _getBit
                          _setPinDir
                        _setPinLevel
 ---------------------------------------------------------------------------------
 (1) _setPinLevel                                          6     4      2     148
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _setPinDir                                            6     4      2     150
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _getBit                                               7     5      2      23
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _delayMS                                              7     5      2      93
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayMS
   _getBit
   _setPinDir
   _setPinLevel

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      7       7     50.0%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Jul 16 15:10:18 2025

                      l6 078B                       l12 07C3                       l30 0745  
                     l15 0726                       l40 07CD                       l35 0753  
                    l632 0755                      l640 078D                      l634 075A  
                    l642 0792                      l660 072C                      l652 0727  
                    l636 0770                      l644 07A8                      l662 0732  
                    l654 072A                      l638 0775                      l646 07AD  
                    l670 07EF                      l664 073F                      l648 0714  
                    l666 07C4                      l668 07E5                      u210 073F  
                    u130 075A                      u211 073E                      u131 0759  
                    u220 0753                      u204 07BD                      u221 0752  
                    u205 07BB                      u150 0775                      u230 07E5  
                    u215 073B                      u151 0774                      u231 07E4  
                    u144 076A                      u225 074F                      u145 0768  
                    u170 0792                      u171 0791                      u164 0785  
                    u165 0783                      u190 07AD                      u191 07AC  
                    u184 07A2                      u185 07A0                      fsr0 0004  
                    indf 0000                     _main 07C4                     btemp 007E  
                   start 0000                    ?_main 0070          __end_of_delayMS 0754  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0077             ?_setPinLevel 0070  
                 _getBit 0714                ??_delayMS 0072  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 07C4                  ?_getBit 0070  
          setPinDir@port 0070                  _delayMS 0727                  __ptext1 078C  
                __ptext2 0754                  __ptext3 0714                  __ptext4 0727  
       setPinLevel@level 0071     end_of_initialization 07FC        __end_of_setPinDir 078C  
             getBit@port 0070           __end_of_getBit 0727      start_initialization 07FC  
               ??_getBit 0072                ___latbits 0002                 ?_delayMS 0070  
          ??_setPinLevel 0072             setPinDir@dir 0071             setPinDir@pin 0075  
        setPinLevel@port 0070                _setPinDir 0754                getBit@pin 0070  
    __end_of_setPinLevel 07C4               ?_setPinDir 0070                 delayMS@M 0070  
               delayMS@i 0073                 delayMS@j 0075           setPinLevel@pin 0075  
            _setPinLevel 078C              ??_setPinDir 0072  
